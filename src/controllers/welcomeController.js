const { Markup } = require('telegraf');
const path = require('path');
const fs = require('fs').promises;
const { courses } = require('../data/courses');
const { sendMail } = require('../services/mailer');
const { logger } = require('../utils/logger');
const { logCourseView } = require('../services/statistics');
const teacherChatController = require('./teacherChatController');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
 * @param {string} phoneNumber - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
 * @returns {string|boolean} - –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ false, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.
 */
function isValidPhoneNumber(phoneNumber) {
    const cleanedNumber = phoneNumber.replace(/[^\d+]/g, '');
    return /^\+?\d{10,15}$/.test(cleanedNumber) ? cleanedNumber : false;
}

async function sendWelcomeMessage(ctx) {
    const logoPath = path.join(__dirname, '../assets/pro_code_logo.png');
    
    try {
        await fs.access(logoPath);
        await ctx.replyWithPhoto(
            { source: logoPath },
            {
                caption: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pro Code! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üéì –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö', callback_data: 'show_courses' }],
                        [{ text: 'üÜì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', callback_data: 'free_lesson' }],
                        [{ text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'faq' }],
                        [{ text: 'üë®‚Äçüè´ –ß–∞—Ç —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º', callback_data: 'teacher_chat' }]
                    ]
                }
            }
        );
    } catch (error) {
        logger.warn('–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üéì –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö', 'show_courses')],
                [Markup.button.callback('üÜì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', 'free_lesson')],
                [Markup.button.callback('‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', 'faq')]
            ])
        );
    }
}

async function handleCallback(ctx) {
    const callbackData = ctx.callbackQuery.data;

    if (callbackData === 'show_courses') {
        await showCourses(ctx);
    } else if (callbackData === 'free_lesson') {
        await showFreeLessonOptions(ctx);
    } else if (callbackData.startsWith('free_lesson_')) {
        const courseIndex = parseInt(callbackData.split('_')[2], 10);
        if (!isNaN(courseIndex) && courseIndex >= 0 && courseIndex < courses.length) {
            await handleFreeLessonRequest(ctx, courseIndex);
        } else {
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            await sendWelcomeMessage(ctx);
        }
    } else if (callbackData.startsWith('course_')) {
        await handleCourseSelection(ctx, callbackData);
    } else if (callbackData === 'main_menu') {
        await sendWelcomeMessage(ctx);
    } else if (callbackData === 'faq') {
        await handleFAQ(ctx);
    } else if (callbackData === 'teacher_chat') {
        await ctx.answerCbQuery();
        return teacherChatController.startTeacherChat(ctx);
    }
    await ctx.answerCbQuery();
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {import('telegraf').Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf.
 */
async function handleText(ctx) {
    if (ctx.session.awaitingName) {
        ctx.session.userName = ctx.message.text;
        ctx.session.awaitingName = false;
        ctx.session.awaitingPhone = true;
        await ctx.reply(
            `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${ctx.session.userName}! üëã\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" –Ω–∏–∂–µ.`,
            Markup.keyboard([
                [Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')]
            ]).resize()
        );
    } else if (ctx.session.awaitingPhone) {
        await handlePhoneInput(ctx);
    } else {
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 * @param {import('telegraf').Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf.
 */
async function handleContact(ctx) {
    const contact = ctx.message.contact;
    if (ctx.session.awaitingName) {
        ctx.session.userName = contact.first_name;
        ctx.session.awaitingName = false;
        ctx.session.awaitingPhone = true;
        await handlePhoneNumber(ctx, contact.phone_number);
    } else if (ctx.session.awaitingPhone) {
        await handlePhoneNumber(ctx, contact.phone_number);
    } else {
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ.');
    }
}

async function sendHelpMessage(ctx) {
    await ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n' +
        '/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n' +
        '/courses - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–æ–≤\n' +
        '/trial - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n\n' +
        '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.'
    );
}

async function sendCoursesList(ctx) {
    await showCourses(ctx);
}

async function startTrialLesson(ctx) {
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –≤–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.');
    await showFreeLessonOptions(ctx);
}

async function handleFAQ(ctx) {
    const faqText = `
–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –î–ª—è –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–¥—Ö–æ–¥—è—Ç –≤–∞—à–∏ –∫—É—Ä—Å—ã?
   –ù–∞—à–∏ –∫—É—Ä—Å—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 5 –¥–æ 16 –ª–µ—Ç.

2. –ö–∞–∫–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤?
   –í—Å–µ –Ω–∞—à–∏ –∫—É—Ä—Å—ã –¥–ª—è—Ç—Å—è 40 —á–∞—Å–æ–≤.

3. –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è?
   –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 2 —á–∞—Å–∞.

4. –ù—É–∂–µ–Ω –ª–∏ —Ä–µ–±–µ–Ω–∫—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä?
   –î–∞, –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.

5. –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?
   –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º!
    `;

    await ctx.reply(faqText, Markup.inlineKeyboard([
        [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]));
}

async function showCourses(ctx) {
    const courseButtons = courses.map((course, index) => 
        [Markup.button.callback(`${course.emoji} ${course.title}`, `course_${index}`)]
    );

    courseButtons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);

    const logoPath = path.join(__dirname, '../assets/pro_code_logo.png');
    
    try {
        await fs.access(logoPath);
        await ctx.replyWithPhoto(
            { source: logoPath },
            {
                caption: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:',
                reply_markup: {
                    inline_keyboard: courseButtons
                }
            }
        );
    } catch (error) {
        logger.warn('–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:',
            Markup.inlineKeyboard(courseButtons)
        );
    }
}

async function showFreeLessonOptions(ctx) {
    const courseButtons = courses.map((course, index) => 
        [Markup.button.callback(`${course.emoji} ${course.title}`, `free_lesson_${index}`)]
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    courseButtons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]);

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:', 
        Markup.inlineKeyboard(courseButtons)
    );
}

async function handleFreeLessonSelection(ctx, callbackData) {
    const courseTitle = callbackData.replace('free_lesson_', '');
    await ctx.reply(
        `–°—É–ø–µ—Ä –≤—ã–±–æ—Ä! –ö—É—Ä—Å "${courseTitle}" - –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏ –≤ IT. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?`
    );
    ctx.session.awaitingName = true;
    ctx.session.selectedCourse = courseTitle;
}

async function handleCourseSelection(ctx, callbackData) {
    const courseIndex = parseInt(callbackData.split('_')[1], 10);
    const selectedCourse = courses[courseIndex];
    
    if (!selectedCourse) {
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return await sendWelcomeMessage(ctx);
    }

    const detailsText = selectedCourse.details.join('\n');
    
    const message = `
${selectedCourse.emoji} *${selectedCourse.title}*
${selectedCourse.description}

*–ß–µ–º—É –Ω–∞—É—á–∏—Ç—Å—è —Ä–µ–±–µ–Ω–æ–∫:*
${detailsText}

üìÖ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${selectedCourse.duration}
üïí *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* ${selectedCourse.schedule}
üéö *–£—Ä–æ–≤–µ–Ω—å:* ${selectedCourse.level}
üõ† *–ü—Ä–æ–µ–∫—Ç—ã:* ${selectedCourse.projects}
üß† *–ù–∞–≤—ã–∫–∏:* ${selectedCourse.skills}

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä ${selectedCourse.title}?
    `;

    const keyboard = [
        [Markup.button.callback('üÜì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', `free_lesson_${courseIndex}`)],
        [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'show_courses')]
    ];

    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
}

async function sendTextMessage(ctx, message, courseIndex) {
    await ctx.replyWithMarkdown(message,
        Markup.inlineKeyboard([
            [Markup.button.callback('üÜì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', `free_lesson_${courseIndex}`)],
            [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'show_courses')],
            [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
    );
}

async function handleNameInput(ctx) {
    ctx.session.userName = ctx.message.text;
    ctx.session.awaitingName = false;
    ctx.session.awaitingPhone = true;
    await ctx.reply(
        `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${ctx.session.userName}! üëã\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" –Ω–∏–∂–µ.`,
        Markup.keyboard([
            [Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')]
        ]).resize()
    );
}

async function handlePhoneInput(ctx) {
    const phoneNumber = ctx.message.contact ? ctx.message.contact.phone_number : isValidPhoneNumber(ctx.message.text);
    if (phoneNumber) {
        await handlePhoneNumber(ctx, phoneNumber);
    } else {
        await ctx.reply(
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79001234567, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞".'
        );
    }
}

async function handlePhoneNumber(ctx, phoneNumber) {
    const userName = ctx.session.userName;
    const selectedCourse = ctx.session.selectedCourse;

    await ctx.reply(
        `üéâ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, ${userName}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞.\n\nüìö –ö—É—Ä—Å: "${selectedCourse}"\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneNumber}\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã:\n‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è\n‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—É—Ä—Å–µ –∏ –Ω–∞—à–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è\n\n–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å –≤–∞–º–∏ –≤ Pro Code! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üöÄ`,
        Markup.removeKeyboard()
    );

    sendMail({ name: userName, phone: phoneNumber, course: selectedCourse });

    // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
    ctx.session.awaitingName = false;
    ctx.session.awaitingPhone = false;
    ctx.session.userName = null;
    ctx.session.selectedCourse = null;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await sendWelcomeMessage(ctx);
}

async function handleFreeLessonRequest(ctx, courseIndex = null) {
    await ctx.answerCbQuery();
    
    let courseName = "–Ω–µ –≤—ã–±—Ä–∞–Ω";
    if (courseIndex !== null && courses[courseIndex]) {
        const selectedCourse = courses[courseIndex];
        courseName = selectedCourse.title;
    }
    
    ctx.session.selectedCourse = courseName;
    ctx.session.awaitingName = true;

    await ctx.reply(
        `–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ${courseName !== "–Ω–µ –≤—ã–±—Ä–∞–Ω" ? ` –ø–æ –∫—É—Ä—Å—É "${courseName}"` : ''}. üòä\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`,
        Markup.keyboard([
            [Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')]
        ]).resize()
    );
}

async function cancelRegistration(ctx) {
    ctx.session.awaitingName = false;
    ctx.session.awaitingPhone = false;
    ctx.session.userName = null;
    ctx.session.selectedCourse = null;

    await ctx.reply('–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!', Markup.removeKeyboard());
    await sendWelcomeMessage(ctx);
}

function sendCourseDetails(ctx, courseIndex) {
    const course = courses[courseIndex];
    logCourseView(course.title); // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...
}

module.exports = {
    sendWelcomeMessage,
    handleCallback,
    handleText,
    handleContact,
    sendHelpMessage,
    sendCoursesList,
    startTrialLesson,
    handleFAQ,
    handleFreeLessonRequest  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
};

console.log("–Ø –∂–∏–≤–æ–π!")
